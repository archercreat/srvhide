# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(srvhide)

include(FetchContent)

message(STATUS "Fetching argparse...")
FetchContent_Declare(
	argparse
	GIT_REPOSITORY
		https://github.com/p-ranav/argparse.git
	GIT_TAG
		v2.2
)
FetchContent_MakeAvailable(argparse)

# Options
option(ZYDIS_BUILD_TOOLS OFF)
option(ZYDIS_BUILD_EXAMPLES OFF)

# Blackbone/src/BlackBone
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/Blackbone/src/BlackBone")
else()
	set(CMAKE_FOLDER "Blackbone/src/BlackBone")
endif()
add_subdirectory("Blackbone/src/BlackBone")
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

target_compile_features(BlackBone PUBLIC cxx_std_17)
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    link_directories(Blackbone/src/3rd_party/DIA/lib/amd64)
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    link_directories(Blackbone/src/3rd_party/DIA/lib)
endif()
target_link_libraries(BlackBone PUBLIC diaguids.lib)
target_include_directories(BlackBone PUBLIC Blackbone/src)

# Target srvhide
set(CMKR_TARGET srvhide)
set(srvhide_SOURCES "")

list(APPEND srvhide_SOURCES
	"src/main.cpp"
)

list(APPEND srvhide_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${srvhide_SOURCES})
add_executable(srvhide)

if(srvhide_SOURCES)
	target_sources(srvhide PRIVATE ${srvhide_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT srvhide)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${srvhide_SOURCES})

target_compile_features(srvhide PRIVATE
	cxx_std_20
)

target_link_libraries(srvhide PRIVATE
	BlackBone
	argparse
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

